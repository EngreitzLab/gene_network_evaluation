#+title: Enhlink Gene Enrichment analysis
#+author: Olivier Poirion Ph.D.
#+email: olivier.poirion@jax.org
#+email: o.poirion@gmail.com
#+date: 2024-01-26


* Enhancer linkage enrichment analysis using Enhlink

This tutorial presents two workflows to evaluate gene programs using enhancer-gene linkages.
A gene program refers to a set of genes identfied analytically and which are putatively co-expressed or co-regulated thanks to their belonging to a similar biological program such as a pathway.
Here were are using enhancer-gene linkage identified analytically to compute the number of genes directly connected (or reachable) through the linkage. Alternatively, the enhancers linked to the genes of a given program can be used to identify the transcription factor motifs significantly enriched within that program.

The enhancer-promoter linkages are identified using [[https://enhlinktools.readthedocs.io/][Enhlink]] a new computational method inferring linkage from single-cell ATAC-seq and multi-omics datasets.

#+html: <p align="center"><img src="./workflow_presentation.readme.png" /></p>

Below, we are detailling how to use the two workflows.

** requirements and options

The python program requires the following libraries: _igraph_, _pandas_, _statsmodels_, and _numpy_. Any recent versions of these packages should work.

The input options can be accessible with:

#+begin_src sh :session sh1

python3 ./gene_enrichment_enhlink.py -h

# OUTPUT

usage: gene_enrichment_enhlink.py [-h] -b file -g str/file [str/file ...] [-m file]
                                  [-a {"connectivity", "motif"}] -bl file [-t int] -o file

Compute enrichment score for gene set based on epigenomic linkage (enhancer-promoter)

options:
  -h, --help            show this help message and exit
  -b file, --bedpe file
                        Enhlink bedpe file containing enhancer-promoter linkage. first 6 columns are enhancer-
                        promoter coordinates. Next three columns are p-value, score, and Adj. score. The last
                        column is the gene symbol of the promoter
  -g str/file [str/file ...], --genes str/file [str/file ...]
                        Set(s) of genes to test for enrichment. if a file is used as input, two columns tab
                        separated are required, with the first column as the gene symbol and the second the set
                        name. Otherwise, a list of genes is required
  -m file, --motif file
                        Motiff results file for each enhancer (FIMO file)
  -a {"connectivity", "motif"}, --analysis {"connectivity", "motif"}
                        Type of analysis to perform. Default is "connectivity" that determines how connected are
                        genes within the set. Alternative is "motif" that determines the highest motif enrichment
                        score based on the enhancers' motifs
  -bl file, --baseline file
                        list of baseline genes. List of all the genes used in the analysis
  -t int, --trials int  Random trials to perform from the baseline genes to compute the p-value
  -o file, --out file   Output file

#+end_src


The bedpe file refers to the output of an Enhlink analysis and is similar to a BED file but with six mendatory columns indicating the enhancer (first three columns) and the promoter (next three columns) genomic coordinates. Other columns indicates scores, pvalues and gene symbols. Enhlink's linkage can be easily inferred directly from a cellranger output, from a cell x peak sparse boolean matrix from a scATAC-seq data, or from single-cell multi-omics data containing at least ATAC data or similar omics. See [[https://enhlinktools.readthedocs.io/][Enhlink]]'s documentation for more details.

if the _motif_ option is used as analysis, a FIMO results file is required as input containing  motifs inferred within the enhancer regions identified by enhlinks.

First, all enhancer regions must be isolated from the Enhlink bedpe file:

#+begin_src sh :session sh1
# Assuming that our bedpe file is named all.bedpe
ENHLINK="all.bedpe"
# output file name
OUT="all.bed"

cat ${ENHLINK}|grep -v "#"|cut -f1,2,3|sort|uniq > ${OUT}
#+end_src

Then a FIMO analysis can be launched. Note that fimo and bedtools needs to be installed. Also, the corresponding full Human (or mouse) genome needs to be accessible as a fasta file. Finally, a MEME motif database is also required as input (that can be easily downladed from HOCOMOCO).

#+begin_src sh :session sh1
FIMO="~/prog/meme/bin/fimo"

BED="/all.bed"
OUT="./all.motif.v1/"
MM10="~/data/ref_genomes/hg38/hg38.fa"
MOTIFMAT="~/motif_databases/HUMAN/HOCOMOCOv11_core_HUMAN_mono_meme_format.meme"
# MOTIFMAT="/Users/poirio/data/snATAC_data/ref_genomes/mm10/JASPAR2022_CORE_vertebrates_non-redundant_pfms_meme.txt"

mkdir -p ${OUT}

bedtools getfasta -fi ${MM10} -bed ${BED} > ${BED}.fa

rm -r ${OUT}

${FIMO} --o ${OUT}  ${MOTIFMAT} ${BED}.fa

rm ${BED}.fa

head ${OUT}/fimo.tsv
open ${OUT}/fimo.html

zcat ${OUT}/fimo.tsv|awk '{if($8 < 0.10){ print($0)}}' > ${OUT}/fimo.refined.tsv

wc -l ${OUT}/fimo.refined.tsv
wc -l ${OUT}/fimo.tsv

gzip fimo.refined.tsv
gzip fimo.tsv
#+end_src



** Scoring gene programs by inferring the number of genes directly reachable

To launch the connectivity analysis, the following template can be used

#+begin_src sh :session sh1
ENHLINK="all.bedpe"
OUT="./enrichment.connectivity.results.tsv"
GENES="top50_genes.cluster.tsv"
BASELINE="aggr_processed.ygi"

BIN="./gene_enrichment_enhlink.py"

python3 ${BIN} \
        --bedpe ${ENHLINK} \
        --genes ${GENES} \
        --out ${OUT} \
        --baseline ${BASELINE} \
        --analysis "connectivity"

#+end_src

_ENHLINK_ is a bedpe file obtained with Enhlink and formatted as bellow. However, other linkage program can be used and reformated. Currently, the scores values are not used by the method,  any value will have the same effect.

#+begin_src sh :session sh1
#chrID1 start   stop    chrID2  start   stop    FDR.Adj.Pval    Score   Adj.Score       geneID
chr18   21314710        21316994        chr18   21240186        21244186        5.90e-05        5.72e-04        1.61e-02     loc101927496
chr18   21439302        21442587        chr18   21240186        21244186        0.00e+00        4.27e-03        1.25e-01     loc101927496
chr18   21300270        21307487        chr18   21240186        21244186        0.00e+00        1.08e-02        8.23e-02     loc101927496
chr13   107675020       107677362       chr13   107833458       107837458       3.86e-04        8.68e-06        1.12e-05     fam155a-it1

#+end_src


_GENES_ is the file containing the gene program to score. It is organised as follow: The first column is the gene symbol. The second is the program ID (can be str). The third column is the gene score or p-value (not currently used).

#+begin_src sh :session sh1
head ${GENE}

#OUTPUT
TPM1    7       2.375269948032512e-153
TUBB4B  7       1.0403829481763625e-133
TUBA1B  7       3.1721243170835955e-130
HMGB2   7       1.8813176159911026e-128
HMGB1   7       2.4279131763277577e-120
LUM     7       9.637383823457414e-116
CALM2   7       6.115911502267342e-114
STMN1   7       3.2457670526419953e-114
CENPF   7       1.1512291200902435e-112
PTTG1   7       4.168694267251096e-110
#+end_src

_BASELINE_ is a list of reference genes that will be used to randomly sample and infer baseline scores. These scores will further be used for computing the gene program p-value.

#+begin_src sh :session sh1
head ${BASELINE}

#OUTPUT
AL627309.1
AL732372.1
AL669831.5
LINC00115
FAM41C
AL645608.7
AL645608.3
AL645608.5
AL645608.1
SAMD11
#+end_src

_OUT_ is the output file. The groups are sorted with regards to their adjusted score (score_adj) reflecting the average number of pair of genes connected divided with the number of genes in the group. _score_ is the absolute number and the _p-value_ reflect how likely such a score is obtained within random group of genes of similar size. The number of random groups sampled is defined with the _-trials_ option

#+begin_src sh :session sh1

head ${OUT}

#OUTPUT
group   p-value score   score_adj       linked_genes
13      0.928   3.0     0.003246753246753247    csf3r;ppme1;mrps15;ucp2;kcnq1ot1;cdkn1c
1       0.051000000000000045    3.0     0.0026052974381241857   tubb2b;serpinb9;nqo2
6       0.22099999999999997     3.0     0.0025  dab2;malat1;rictor;neat1;atp6v0a1;hsd17b1
2       0.6990000000000001      2.0     0.0018912529550827422   pwar6;snrpn;tnnt1;tnni3
8       0.727   2.0     0.0016666666666666668   s100a13;lpcat2;s100a6;mmp2
9       0.919   1.0     0.0008684324793747286   s100a10;s100a11
11      0.942   1.0     0.0008684324793747286   mpzl1;dcaf6
3       0.278   1.0     0.0008333333333333334   fbxo2;mad2l2
5       0.21199999999999997     1.0     0.0008333333333333334   fut8-as1;max

#+end_src

** Scoring gene programs by inferring the enriched motifs within the enhancer

Alternatively, motifs found in enhancer regions can be used to find significantly enriched motifs within a gene group with regards to random groups.


#+begin_src sh :session sh1
ENHLINK="all.bedpe"
OUT="./enrichment.motif.results.tsv"
GENES="top50_genes.cluster.tsv"
BASELINE="aggr_processed.ygi"
FIMO="fimo.refined.tsv.gz"

BIN="./gene_enrichment_enhlink.py"

python3 ${BIN} \
        --bedpe ${ENHLINK} \
        --genes ${GENES} \
        --out ${OUT} \
        --baseline ${BASELINE} \
        --motif ${FIMO} \
        --analysis "motif"

#+end_src

In this case, a motif results file is required following a FIMO analysis.


#+begin_src sh :session sh1
ZN436_HUMAN.H11MO.0.C           chr19:6861677-6864028   387     410     +       42.7727 1.44e-15        1.64e-07        tcagggagggcttcctggaggagg
ZN264_HUMAN.H11MO.0.C           chr19:35161320-35164790 1268    1291    +       30.832  4.69e-15        1.8e-07 tcttataagggcactaatcccatc
ZN264_HUMAN.H11MO.0.C           chr3:16663300-16666863  3249    3272    -       30.832  4.69e-15        1.8e-07 TCTTATAAGGGCACTAATCCCATC
ZN264_HUMAN.H11MO.0.C           chr7:137961196-137968247        5807    5830    -       30.832  4.69e-15        1.8e-07 TCTTATAAGGGCACTAATCCCATC
ZN260_HUMAN.H11MO.0.C           chr11:74120447-74122304 17      40      +       39.4697 6.96e-15        9.08e-08        tttttatggctgcatagtattcca
ZN260_HUMAN.H11MO.0.C           chr9:17635278-17636398  43      66      +       39.4697 6.96e-15        9.08e-08        tttttatggctgcatagtattcca
ZN260_HUMAN.H11MO.0.C           chr15:60212245-60213344 741     764     -       39.4697 6.96e-15        9.08e-08        TTTTTATGGCTGCATAGTATTCCA
ZN260_HUMAN.H11MO.0.C           chr17:15438957-15441723 785     808     -       39.4697 6.96e-15        9.08e-08        TTTTTATGGCTGCATAGTATTCCA
ZN260_HUMAN.H11MO.0.C           chr6:4357057-4359573    914     937     -       39.4697 6.96e-15        9.08e-08        TTTTTATGGCTGCATAGTATTCCA
ZN260_HUMAN.H11MO.0.C           chr3:98779909-98782101  1222    1245    -       39.4697 6.96e-15        9.08e-08        TTTTTATGGCTGCATAGTATTCCA

#+end_src
